<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>