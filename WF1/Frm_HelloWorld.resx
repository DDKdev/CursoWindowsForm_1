<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>